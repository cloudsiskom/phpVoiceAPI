<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use SiskomVoiceAPILib\Controllers\MaskingController;
use SiskomVoiceAPILib\Exceptions;
use SiskomVoiceAPILib\Models;

class MaskingControllerTest extends BaseTestController
{
    /**
     * @var MaskingController MaskingController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getMaskingController();
    }

    public function testRequest()
    {
        // Parameters for the API call
        $body = TestParam::object("{\r\n  \"caller_id\": \"[CALLER_ID]\"\r\n}", Models\Requestrequest::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->request($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:43:00 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['57', false];
        $headers['ETag'] = ['W/"39-Mh0qFOF9HwcxlVr/+UGazVDCq9U"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"caller_id\": \"628198788686\",\r\n  \"isActive\": 0\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testDelete()
    {
        // Parameters for the API call
        $body = TestParam::object("{\r\n  \"caller_id\": \"[CALLER_ID]\"\r\n}", Models\Deleterequest::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->delete($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:43:09 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['62', false];
        $headers['ETag'] = ['W/"3e-3Xp+q4Mh3C/LPAD3sjF+nyCNWTY"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"caller_id\": \"628198788686\",\r\n  \"action" .
                "\": \"delete\"\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testMList()
    {

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->mList();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:43:16 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['27', false];
        $headers['ETag'] = ['W/"1b-caynMyjgSmfmK+gRUb2+MCnjUCo"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(
            KeysBodyMatcher::init(
                TestParam::object("{\r\n  \"response\": true,\r\n  \"data\": []\r\n}"),
                false,
                false
            )
        )
        ->assert();
    }
}
