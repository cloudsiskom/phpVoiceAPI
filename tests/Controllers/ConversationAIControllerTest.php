<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use SiskomVoiceAPILib\Controllers\ConversationAIController;
use SiskomVoiceAPILib\Exceptions;
use SiskomVoiceAPILib\Models;

class ConversationAIControllerTest extends BaseTestController
{
    /**
     * @var ConversationAIController ConversationAIController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getConversationAIController();
    }

    public function testIntentQuery()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"ai_name\": \"[AI_NAME]\",\r\n  \"training_phrases\": \"[TRAINING_PHRASE]\"\r\n}",
            Models\IntentQueryRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->intentQuery($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:46:49 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['88', false];
        $headers['ETag'] = ['W/"58-dOWWRfzY6ltcrUjlQs3WFpWO0Fw"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"message_texts\": \"Saya tidak dengar Anda bi" .
                "lang apa. Bisa ulangi lagi?\"\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testIntentList()
    {

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->intentList();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:46:56 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['925', false];
        $headers['ETag'] = ['W/"39d-tL00sfPfEyghbtPJ1H3Em8JVEgU"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"data\": [\r\n    {\r\n      \"id\": 14,\r\n " .
                "     \"ai_name\": \"BANK_BKKN\",\r\n      \"display_name\": \"sahabat\",\r\n   " .
                "   \"training_phrases\": \"sahabatmu siapa\",\r\n      \"message_texts\": \"ngg" .
                "ak punya deh\",\r\n      \"create_date\": \"2022-08-22T19:59:06.000Z\"\r\n    }" .
                ",\r\n    {\r\n      \"id\": 15,\r\n      \"ai_name\": \"BANK_BKKN\",\r\n      " .
                "\"display_name\": \"terima kasih\",\r\n      \"training_phrases\": \"terima kas" .
                "ih\",\r\n      \"message_texts\": \"pulang saja kamu sana!\",\r\n      \"create" .
                "_date\": \"2022-08-23T14:45:39.000Z\"\r\n    },\r\n    {\r\n      \"id\": 16,\r" .
                "\n      \"ai_name\": \"BANK_BKKN\",\r\n      \"display_name\": \"teman\",\r\n  " .
                "    \"training_phrases\": \"temanmu siapa\",\r\n      \"message_texts\": \"ngga" .
                "k punya juga\",\r\n      \"create_date\": \"2022-08-24T02:11:58.000Z\"\r\n    }" .
                ",\r\n    {\r\n      \"id\": 17,\r\n      \"ai_name\": \"BANK_BKKN\",\r\n      " .
                "\"display_name\": \"kamu siapa yang buat\",\r\n      \"training_phrases\": \"ka" .
                "mu siapa yang buat;siapa yang buat;programmermu siapa\",\r\n      \"message_tex" .
                "ts\": \"Aku lahir dari batu !\",\r\n      \"create_date\": \"2022-08-25T18:53:3" .
                "5.000Z\"\r\n    },\r\n    {\r\n      \"id\": 19,\r\n      \"ai_name\": \"BANK_B" .
                "KKN\",\r\n      \"display_name\": \"Hidayat\",\r\n      \"training_phrases\": " .
                "\"hidayat\",\r\n      \"message_texts\": \"jelek banget\",\r\n      \"create_da" .
                "te\": \"2022-09-01T17:02:54.000Z\"\r\n    }\r\n  ]\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testIntentEdit()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"ai_name\": \"[AI_NAME]\",\r\n  \"display_name\": \"[DISPLAY_NAME]\",\r\n " .
            " \"training_phrases\": \"[TRAINING_PHRASE,SPARATED BY ;]\",\r\n  \"message_texts\":" .
            " \"[RESPONSE_TEXT SPARATED BY ;]\"\r\n}",
            Models\IntentEditRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->intentEdit($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:47:03 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['51', false];
        $headers['ETag'] = ['W/"33-J5vRb0peGz7nMg7zrsWjy/kYvc4"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object("{\r\n  \"response\": true,\r\n  \"message\": \"Update intent success\"\r\n}"),
            false,
            false
        ))
        ->assert();
    }

    public function testAIName()
    {

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->aIName();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:47:10 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['98', false];
        $headers['ETag'] = ['W/"62-AYPcTIdhuH6aATCMHLfSsn3hG3k"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"data\": [\r\n    {\r\n      \"id\": 1,\r\n  " .
                "    \"ai_name\": \"BANK_BKKN\",\r\n      \"create_date\": \"2022-08-15T17:13:43" .
                ".000Z\"\r\n    }\r\n  ]\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testIntentDelete()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"ai_name\": \"[AI_NAME]\",\r\n  \"display_name\": \"[DISPLAY_NAME]\"\r\n}",
            Models\IntentDeleteRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->intentDelete($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:47:18 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['51', false];
        $headers['ETag'] = ['W/"33-xgElIZV6zqvAQHG5uUw46Fg39Q8"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object("{\r\n  \"response\": true,\r\n  \"message\": \"Delete intent success\"\r\n}"),
            false,
            false
        ))
        ->assert();
    }
}
