<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use SiskomVoiceAPILib\Controllers\DeviceController;
use SiskomVoiceAPILib\Exceptions;
use SiskomVoiceAPILib\Models;

class DeviceControllerTest extends BaseTestController
{
    /**
     * @var DeviceController DeviceController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getDeviceController();
    }

    public function testDevice()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"device_type\": \"[DEVICE_TYPE]\",\r\n  \"device_owner\": \"[DEVICE_OWNER]" .
            "\",\r\n  \"extension\": \"[DEVICE_NAME / EXTENSION]\",\r\n  \"secret\": \"[DEVICE_S" .
            "ECRET]\",\r\n  \"ip_address\": \"[DEVICE_IP_ADDRESS]\"\r\n}",
            Models\DeviceRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->device($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Thu, 15 Sep 2022 20:43:43 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['102', false];
        $headers['ETag'] = ['W/"66-eWU/r2jP2Owg07JnaphSPq9a1Gs"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"data\": {\r\n    \"extension\": \"9614245000" .
                "00013\",\r\n    \"secret\": \"padamunegeri\",\r\n    \"device_owner\": \"kiki\"" .
                "\r\n  }\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }

    public function testDevcieList()
    {

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->devcieList();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', false];
        $headers['Date'] = ['Sat, 17 Sep 2022 07:05:45 GMT', false];
        $headers['Server'] = ['Apache/2.4.41 (Ubuntu)', false];
        $headers['X-Powered-By'] = ['Express', false];
        $headers['Content-Length'] = ['331', false];
        $headers['ETag'] = ['W/"14b-zDlQwUiFNcelUsUEV6LNlaZokJ4"', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];

        // Assert result with expected response
        $this->newTestCase($result)
        ->expectStatus(200)
        ->allowExtraHeaders()
        ->expectHeaders($headers)
        ->bodyMatcher(KeysBodyMatcher::init(
            TestParam::object(
                "{\r\n  \"response\": true,\r\n  \"data\": [\r\n    {\r\n      \"extension\": " .
                "\"968976567\",\r\n      \"host\": \"dynamic\",\r\n      \"device_type\": \"EXTE" .
                "N\",\r\n      \"device_owner\": \"sahabat\",\r\n      \"secret\": \"sahabat\"," .
                "\r\n      \"isOnline\": 0,\r\n      \"device_state\": \"UNAVAILABLE\"\r\n    }," .
                "\r\n    {\r\n      \"extension\": \"961424500000013\",\r\n      \"host\": \"192" .
                ".168.1.1\",\r\n      \"device_type\": \"TRUNK\",\r\n      \"device_owner\": \"k" .
                "iki\",\r\n      \"secret\": \"padamunegeri\",\r\n      \"isOnline\": 0,\r\n    " .
                "  \"device_state\": null\r\n    }\r\n  ]\r\n}"
            ),
            false,
            false
        ))
        ->assert();
    }
}
