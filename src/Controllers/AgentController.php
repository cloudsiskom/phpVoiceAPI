<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SiskomVoiceAPILib\Exceptions\AgentLoginException;
use SiskomVoiceAPILib\Exceptions\ApiException;
use SiskomVoiceAPILib\Models\AgentDelete;
use SiskomVoiceAPILib\Models\AgentDeleteRequest;
use SiskomVoiceAPILib\Models\AgentList;
use SiskomVoiceAPILib\Models\AgentLoginRequest;
use SiskomVoiceAPILib\Models\AgentNew;
use SiskomVoiceAPILib\Models\AgentNewRequest;

class AgentController extends BaseController
{
    /**
     * ACTION :
     *
     * \*   new (New agent)
     * \*   edit (Edit existing Agent)
     *
     * @param AgentNewRequest $body
     *
     * @return AgentNew Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function agentNew(AgentNewRequest $body): AgentNew
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/agent/new')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AgentNew::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param AgentDeleteRequest $body
     *
     * @return AgentDelete Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function agentDelete(AgentDeleteRequest $body): AgentDelete
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/agent/delete')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AgentDelete::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return AgentList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function agentList(): AgentList
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/agent/list')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->type(AgentList::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * **ACTION** :
     *
     * \*   login (Login agent to EXTENSION)
     * \*   logoff (logoff agent from EXTENSION)
     *
     * @param AgentLoginRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function agentLogin(AgentLoginRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/agent/action')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(403, ErrorType::init('Forbidden', AgentLoginException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
