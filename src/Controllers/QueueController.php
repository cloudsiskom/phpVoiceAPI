<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SiskomVoiceAPILib\Exceptions\ApiException;
use SiskomVoiceAPILib\Exceptions\QueueAddAgentException;
use SiskomVoiceAPILib\Exceptions\QueueDeleteException;
use SiskomVoiceAPILib\Exceptions\QueueRemoveAgentException;
use SiskomVoiceAPILib\Models\QueueAddAgentRequest;
use SiskomVoiceAPILib\Models\QueueDeleteRequest;
use SiskomVoiceAPILib\Models\QueueList;
use SiskomVoiceAPILib\Models\QueueNew;
use SiskomVoiceAPILib\Models\QueueNewRequest;
use SiskomVoiceAPILib\Models\QueueRemoveAgentRequest;

class QueueController extends BaseController
{
    /**
     * RING_STRATEGY :
     *
     * \*   ringall: ring all available channels until one answers (default)
     * \*   roundrobin: take turns ringing each available interface (deprecated in 1.4, use rrmemory)
     * \*   leastrecent: ring interface which was least recently called by this queue
     * \*   fewestcalls: ring the one with fewest completed calls from this queue
     * \*   random: ring random interface
     * \*   rrmemory: round robin with memory, remember where we left off last ring pass
     *
     * @param QueueNewRequest $body
     *
     * @return QueueNew Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queueNew(QueueNewRequest $body): QueueNew
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/queue/new')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(QueueNew::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param QueueDeleteRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queueDelete(QueueDeleteRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/queue/delete')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(404, ErrorType::init('Not Found', QueueDeleteException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return QueueList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queueList(): QueueList
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/queue/list')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->type(QueueList::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * **AGENT_TYPE** :
     *
     * \*   SIP (Agent is SIP device / Extension)
     * \*   local (Agent is AGENT_CODE)
     *
     * @param QueueAddAgentRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queueAddAgent(QueueAddAgentRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/queue/agent')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(404, ErrorType::init('Not Found', QueueAddAgentException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * **AGENT_TYPE** :
     *
     * \* SIP (Agent is SIP device / Extension)
     * \* local (Agent is AGENT_CODE)
     *
     * @param QueueRemoveAgentRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queueRemoveAgent(QueueRemoveAgentRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/queue/agent/delete')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(404, ErrorType::init('Not Found', QueueRemoveAgentException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
