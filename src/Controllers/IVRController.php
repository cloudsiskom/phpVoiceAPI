<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SiskomVoiceAPILib\Exceptions\ApiException;
use SiskomVoiceAPILib\Exceptions\IVRDeleteException;
use SiskomVoiceAPILib\Exceptions\IVRDeleteItemException;
use SiskomVoiceAPILib\Exceptions\IVRNewException;
use SiskomVoiceAPILib\Models\IVRDeleteItemRequest;
use SiskomVoiceAPILib\Models\IVRDeleteRequest;
use SiskomVoiceAPILib\Models\IVRLang;
use SiskomVoiceAPILib\Models\IVRNewRequest;

class IVRController extends BaseController
{
    /**
     * ACTION:
     *
     * \*   new
     * \*   edit
     *
     *
     * LANG :
     *
     * \*   id-ID
     * \*   en-US
     *
     *
     * GENDER
     *
     * \*   MALE
     * \*   FEMALE
     *
     * @param IVRNewRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function iVRNew(IVRNewRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ivr/new')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(403, ErrorType::init('Forbidden', IVRNewException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param IVRDeleteRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function iVRDelete(IVRDeleteRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ivr/delete')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(404, ErrorType::init('Not Found', IVRDeleteException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param IVRDeleteItemRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function iVRDeleteItem(IVRDeleteItemRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ivr/deleteitem')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(404, ErrorType::init('Not Found', IVRDeleteItemException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function iVRList(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ivr/list')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        return $this->execute($_reqBuilder);
    }

    /**
     * @return IVRLang Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function iVRLang(): IVRLang
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ivr/lang')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->type(IVRLang::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
