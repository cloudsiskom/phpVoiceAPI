<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SiskomVoiceAPILib\Exceptions\ApiException;
use SiskomVoiceAPILib\Exceptions\CreateIntentException;
use SiskomVoiceAPILib\Models\AIName;
use SiskomVoiceAPILib\Models\CreateIntentRequest;
use SiskomVoiceAPILib\Models\IntentDelete;
use SiskomVoiceAPILib\Models\IntentDeleteRequest;
use SiskomVoiceAPILib\Models\IntentEdit;
use SiskomVoiceAPILib\Models\IntentEditRequest;
use SiskomVoiceAPILib\Models\IntentList;
use SiskomVoiceAPILib\Models\IntentQuery;
use SiskomVoiceAPILib\Models\IntentQueryRequest;

class ConversationAIController extends BaseController
{
    /**
     * @param CreateIntentRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createIntent(CreateIntentRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ai/intent/create')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(403, ErrorType::init('Forbidden', CreateIntentException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param IntentQueryRequest $body
     *
     * @return IntentQuery Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intentQuery(IntentQueryRequest $body): IntentQuery
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ai/intent/query')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(IntentQuery::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return IntentList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intentList(): IntentList
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ai/intent/list')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->type(IntentList::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param IntentEditRequest $body
     *
     * @return IntentEdit Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intentEdit(IntentEditRequest $body): IntentEdit
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ai/intent/edit')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(IntentEdit::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return AIName Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function aIName(): AIName
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ai/getname')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->type(AIName::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param IntentDeleteRequest $body
     *
     * @return IntentDelete Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intentDelete(IntentDeleteRequest $body): IntentDelete
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ai/intent/delete')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(IntentDelete::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
