<?php

declare(strict_types=1);

/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SiskomVoiceAPILib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use SiskomVoiceAPILib\Controllers\AgentController;
use SiskomVoiceAPILib\Controllers\CallController;
use SiskomVoiceAPILib\Controllers\ConversationAIController;
use SiskomVoiceAPILib\Controllers\DeviceController;
use SiskomVoiceAPILib\Controllers\DIDController;
use SiskomVoiceAPILib\Controllers\IVRController;
use SiskomVoiceAPILib\Controllers\MaskingController;
use SiskomVoiceAPILib\Controllers\QueueController;
use SiskomVoiceAPILib\Controllers\RouteController;
use SiskomVoiceAPILib\Controllers\TranslationController;
use SiskomVoiceAPILib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class SiskomVoiceAPIClient implements ConfigurationInterface
{
    private $call;

    private $masking;

    private $translation;

    private $device;

    private $agent;

    private $queue;

    private $route;

    private $iVR;

    private $conversationAI;

    private $dID;

    private $basicAuthManager;

    private $config;

    private $client;

    /**
     * @see SiskomVoiceAPIClientBuilder::init()
     * @see SiskomVoiceAPIClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->basicAuthManager = new BasicAuthManager(
            $this->config['username'] ?? ConfigurationDefaults::USERNAME,
            $this->config['password'] ?? ConfigurationDefaults::PASSWORD
        );
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::SERVER_1)
            ->authManagers(['global' => $this->basicAuthManager])
            ->build();
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return SiskomVoiceAPIClientBuilder SiskomVoiceAPIClientBuilder instance
     */
    public function toBuilder(): SiskomVoiceAPIClientBuilder
    {
        return SiskomVoiceAPIClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->username($this->basicAuthManager->getUsername())
            ->password($this->basicAuthManager->getPassword())
            ->httpCallback($this->config['httpCallback'] ?? null);
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getBasicAuthCredentials(): ?BasicAuthCredentials
    {
        return $this->basicAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see SiskomVoiceAPIClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see SiskomVoiceAPIClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::SERVER_1): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Call Controller
     */
    public function getCallController(): CallController
    {
        if ($this->call == null) {
            $this->call = new CallController($this->client);
        }
        return $this->call;
    }

    /**
     * Returns Masking Controller
     */
    public function getMaskingController(): MaskingController
    {
        if ($this->masking == null) {
            $this->masking = new MaskingController($this->client);
        }
        return $this->masking;
    }

    /**
     * Returns Translation Controller
     */
    public function getTranslationController(): TranslationController
    {
        if ($this->translation == null) {
            $this->translation = new TranslationController($this->client);
        }
        return $this->translation;
    }

    /**
     * Returns Device Controller
     */
    public function getDeviceController(): DeviceController
    {
        if ($this->device == null) {
            $this->device = new DeviceController($this->client);
        }
        return $this->device;
    }

    /**
     * Returns Agent Controller
     */
    public function getAgentController(): AgentController
    {
        if ($this->agent == null) {
            $this->agent = new AgentController($this->client);
        }
        return $this->agent;
    }

    /**
     * Returns Queue Controller
     */
    public function getQueueController(): QueueController
    {
        if ($this->queue == null) {
            $this->queue = new QueueController($this->client);
        }
        return $this->queue;
    }

    /**
     * Returns Route Controller
     */
    public function getRouteController(): RouteController
    {
        if ($this->route == null) {
            $this->route = new RouteController($this->client);
        }
        return $this->route;
    }

    /**
     * Returns IVR Controller
     */
    public function getIVRController(): IVRController
    {
        if ($this->iVR == null) {
            $this->iVR = new IVRController($this->client);
        }
        return $this->iVR;
    }

    /**
     * Returns Conversation AI Controller
     */
    public function getConversationAIController(): ConversationAIController
    {
        if ($this->conversationAI == null) {
            $this->conversationAI = new ConversationAIController($this->client);
        }
        return $this->conversationAI;
    }

    /**
     * Returns DID Controller
     */
    public function getDIDController(): DIDController
    {
        if ($this->dID == null) {
            $this->dID = new DIDController($this->client);
        }
        return $this->dID;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [Environment::PRODUCTION => [Server::SERVER_1 => 'api.siskom.cloud']];
}
